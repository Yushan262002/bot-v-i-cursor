# -*- coding: utf-8 -*-
"""
Safe wrapper ƒë·ªÉ ch·∫°y bot v√† catch errors
Ch·∫°y: python run_bot_safe.py
"""

import sys
import os
import traceback

def main():
    print("=" * 60)
    print("BOT SAFE LAUNCHER")
    print("=" * 60)
    print()
    
    # T√¨m bot file
    bot_files = ['bot.py', 'bot_fixed_clean.py', 'bot_fixed.py']
    bot_file = None
    
    for bf in bot_files:
        if os.path.exists(bf):
            bot_file = bf
            print(f"‚úÖ T√¨m th·∫•y {bf}")
            break
    
    if not bot_file:
        print("‚ùå Kh√¥ng t√¨m th·∫•y file bot!")
        print("   C√°c file c·∫ßn c√≥: bot.py ho·∫∑c bot_fixed_clean.py")
        input("Press Enter to exit...")
        return 1
    
    print(f"‚ñ∂Ô∏è  ƒêang ch·∫°y {bot_file}...")
    print("=" * 60)
    print()
    
    try:
        # Import v√† ch·∫°y bot
        with open(bot_file, 'r', encoding='utf-8') as f:
            code = f.read()
        
        # Execute bot code
        exec(code, {'__name__': '__main__'})
        
    except KeyboardInterrupt:
        print()
        print("=" * 60)
        print("‚èπÔ∏è  Bot ƒë√£ d·ª´ng (Ctrl+C)")
        print("=" * 60)
        return 0
        
    except Exception as e:
        print()
        print("=" * 60)
        print("‚ùå BOT CRASH - CHI TI·∫æT L·ªñI:")
        print("=" * 60)
        print()
        
        # Print error type
        print(f"Lo·∫°i l·ªói: {type(e).__name__}")
        print(f"Message: {str(e)}")
        print()
        
        # Print full traceback
        print("Traceback:")
        print("-" * 60)
        traceback.print_exc()
        print("-" * 60)
        print()
        
        # Suggestions
        print("=" * 60)
        print("üí° H∆Ø·ªöNG GI·∫¢I QUY·∫æT:")
        print("=" * 60)
        
        error_msg = str(e).lower()
        
        if 'modulenotfounderror' in str(type(e)).lower() or 'no module' in error_msg:
            missing_module = str(e).split("'")[1] if "'" in str(e) else "unknown"
            print(f"‚ùå Thi·∫øu module: {missing_module}")
            print()
            print("Gi·∫£i ph√°p:")
            if missing_module == 'dotenv':
                print("   pip install python-dotenv")
            elif missing_module in ['flask', 'ccxt']:
                print(f"   pip install {missing_module}")
            else:
                print(f"   pip install {missing_module}")
        
        elif 'keyerror' in str(type(e)).lower():
            print("‚ùå Thi·∫øu key trong config")
            print()
            print("Gi·∫£i ph√°p:")
            print("   - Ki·ªÉm tra file .env c√≥ ƒë·∫ßy ƒë·ªß:")
            print("     OKX_API_KEY=...")
            print("     OKX_API_SECRET=...")
            print("     OKX_API_PASSWORD=...")
        
        elif 'authentication' in error_msg or 'invalid' in error_msg:
            print("‚ùå L·ªói x√°c th·ª±c OKX API")
            print()
            print("Gi·∫£i ph√°p:")
            print("   - Ki·ªÉm tra l·∫°i API credentials trong .env")
            print("   - ƒê·∫£m b·∫£o API key c√≤n hi·ªáu l·ª±c")
            print("   - Ki·ªÉm tra quy·ªÅn API (c·∫ßn Trading permission)")
        
        elif 'connection' in error_msg or 'timeout' in error_msg:
            print("‚ùå L·ªói k·∫øt n·ªëi m·∫°ng")
            print()
            print("Gi·∫£i ph√°p:")
            print("   - Ki·ªÉm tra k·∫øt n·ªëi internet")
            print("   - Th·ª≠ l·∫°i sau v√†i gi√¢y")
            print("   - Ki·ªÉm tra firewall/antivirus")
        
        elif 'unicodedecodeerror' in str(type(e)).lower():
            print("‚ùå L·ªói encoding")
            print()
            print("Gi·∫£i ph√°p:")
            print("   - File bot c·∫ßn l∆∞u v·ªõi UTF-8 encoding")
            print("   - Trong VS Code: File > Save with Encoding > UTF-8")
        
        else:
            print("L·ªói kh√¥ng x√°c ƒë·ªãnh.")
            print()
            print("Gi·∫£i ph√°p:")
            print("   1. Ch·∫°y debug script:")
            print("      python debug_bot.py")
            print()
            print("   2. Ki·ªÉm tra bot.log")
            print()
            print("   3. Copy l·ªói tr√™n v√† search Google")
        
        print()
        input("Press Enter to exit...")
        return 1

if __name__ == '__main__':
    exit_code = main()
    sys.exit(exit_code)