// This Pine Script™ code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © traderschatroom88 - Zone Cross System Enhanced

//@version=5
indicator('Zone Cross System Enhanced', shorttitle='Zone Cross Pro', overlay=true, max_labels_count=500, max_lines_count=500, max_boxes_count=500)

// ═══════════════════════════════════════════════════════════════════════════════
// 📊 TREND FOLLOWING SETTINGS
// ═══════════════════════════════════════════════════════════════════════════════

group_trend = "🎯 Trend Following Engine"
follow_type = input.string('enhanced', 'Follow Type', options=['enhanced', 'standard'], group=group_trend, 
              tooltip="Enhanced = More accurate with volatility adjustment\nStandard = Classic ATR-based")
trend_period = input.int(28, 'Trend Period', minval=10, maxval=100, group=group_trend)
trend_multiplier = input.float(5, 'Trend Multiplier', minval=1, maxval=10, step=0.5, group=group_trend)

// ═══════════════════════════════════════════════════════════════════════════════
// 📉 FIBONACCI ZONES SETTINGS - Cải tiến: Thêm Zone 0 (safest)
// ═══════════════════════════════════════════════════════════════════════════════

group_zones = "📉 Entry Zones (Fibonacci Retracement)"
show_zones = input.bool(true, 'Show Entry Zones', group=group_zones)
show_zone0 = input.bool(true, 'Show Zone 0 (Safest - 88.6%)', group=group_zones, 
              tooltip="Zone 0 = Deepest pullback, safest entry, highest probability")

// Zone levels (Fibonacci)
zone0_level = input.float(88.6, 'Zone 0 Level (%)', minval=80, maxval=95, step=0.1, group=group_zones)
zone1_level = input.float(78.6, 'Zone 1 Level (%)', minval=70, maxval=85, step=0.1, group=group_zones)
zone2_level = input.float(61.8, 'Zone 2 Level (%)', minval=55, maxval=70, step=0.1, group=group_zones)
zone3_level = input.float(50.0, 'Zone 3 Level (%)', minval=40, maxval=55, step=0.1, group=group_zones)

// ═══════════════════════════════════════════════════════════════════════════════
// 🛡️ ENTRY CONFIRMATION - Cải tiến: Thêm bộ lọc nhẹ (không quá gắt)
// ═══════════════════════════════════════════════════════════════════════════════

group_confirm = "🛡️ Entry Confirmation (Optional - Light Filters)"
enable_volume_confirm = input.bool(false, 'Volume Confirmation', group=group_confirm,
              tooltip="Require volume spike on entry (không bắt buộc)")
volume_ma_length = input.int(20, 'Volume MA Length', group=group_confirm)
volume_threshold = input.float(1.2, 'Volume Threshold', minval=1.0, maxval=3.0, step=0.1, group=group_confirm,
              tooltip="Volume > (MA * threshold) = Strong move")

enable_momentum_confirm = input.bool(false, 'Momentum Confirmation', group=group_confirm,
              tooltip="Check RSI không extreme (không bắt buộc)")
rsi_length = input.int(14, 'RSI Length', group=group_confirm)
rsi_overbought = input.float(75, 'RSI Overbought', minval=60, maxval=90, group=group_confirm)
rsi_oversold = input.float(25, 'RSI Oversold', minval=10, maxval=40, group=group_confirm)

// ═══════════════════════════════════════════════════════════════════════════════
// 💰 RISK MANAGEMENT - Cải tiến: Exit strategy rõ ràng
// ═══════════════════════════════════════════════════════════════════════════════

group_risk = "💰 Risk Management & Exit Strategy"
show_risk_levels = input.bool(true, 'Show Stop Loss & Take Profit', group=group_risk)

// Stop Loss per Zone
stop_loss_atr_z0 = input.float(1.5, 'Zone 0 Stop Loss (ATR)', minval=0.5, maxval=5, step=0.1, group=group_risk,
              tooltip="Zone 0 = Safest, SL gần nhất")
stop_loss_atr_z1 = input.float(2.0, 'Zone 1 Stop Loss (ATR)', minval=0.5, maxval=5, step=0.1, group=group_risk)
stop_loss_atr_z2 = input.float(2.5, 'Zone 2 Stop Loss (ATR)', minval=0.5, maxval=5, step=0.1, group=group_risk)
stop_loss_atr_z3 = input.float(3.0, 'Zone 3 Stop Loss (ATR)', minval=0.5, maxval=5, step=0.1, group=group_risk,
              tooltip="Zone 3 = Riskiest, SL xa nhất")

// Take Profit
take_profit_atr = input.float(6.0, 'Take Profit (ATR)', minval=2, maxval=20, step=0.5, group=group_risk,
              tooltip="Exit target - back to trend extreme")
use_trailing_stop = input.bool(true, 'Use Trailing Stop', group=group_risk)
trailing_activation_atr = input.float(3.0, 'Trailing Activation (ATR)', minval=1, maxval=10, step=0.5, group=group_risk)
trailing_distance_atr = input.float(2.0, 'Trailing Distance (ATR)', minval=0.5, maxval=5, step=0.5, group=group_risk)

// Exit on trend reversal
exit_on_trend_change = input.bool(true, 'Exit on Trend Change', group=group_risk,
              tooltip="Tự động exit khi trend đảo chiều")

// ═══════════════════════════════════════════════════════════════════════════════
// 🎨 VISUAL SETTINGS
// ═══════════════════════════════════════════════════════════════════════════════

group_visual = "🎨 Visual Settings"
show_trend_line = input.bool(true, 'Show Trend Line', group=group_visual)
show_key_points = input.bool(true, 'Show Key Points (Extremes)', group=group_visual)
show_entry_signals = input.bool(true, 'Show Entry Signals', group=group_visual)
show_dashboard = input.bool(true, 'Show Info Dashboard', group=group_visual)

// Colors
color_uptrend = input.color(#00ff00, 'Uptrend Color', group=group_visual, inline='trend')
color_downtrend = input.color(#ff0000, 'Downtrend Color', group=group_visual, inline='trend')
color_zone0 = input.color(#0088ff, 'Zone 0 Color', group=group_visual, inline='zone0')
color_zone1 = input.color(#00bbff, 'Zone 1 Color', group=group_visual, inline='zone1')
color_zone2 = input.color(#00ddff, 'Zone 2 Color', group=group_visual, inline='zone2')
color_zone3 = input.color(#00ffff, 'Zone 3 Color', group=group_visual, inline='zone3')

// ═══════════════════════════════════════════════════════════════════════════════
// 🔧 CORE CALCULATIONS
// ═══════════════════════════════════════════════════════════════════════════════

// Get OHLC data
norm_o = request.security(ticker.new(syminfo.prefix, syminfo.ticker), timeframe.period, open)
norm_h = request.security(ticker.new(syminfo.prefix, syminfo.ticker), timeframe.period, high)
norm_l = request.security(ticker.new(syminfo.prefix, syminfo.ticker), timeframe.period, low)
norm_c = request.security(ticker.new(syminfo.prefix, syminfo.ticker), timeframe.period, close)

// Enhanced moving average function
Enhanced_ma(_src, _malength) =>
    _enhanced = 0.0
    _enhanced := nz(_enhanced[1]) + (_src - nz(_enhanced[1])) / _malength
    _enhanced

// True range calculations
HiLo = math.min(norm_h - norm_l, 1.5 * nz(ta.sma(norm_h - norm_l, trend_period)))
HRef = norm_l <= norm_h[1] ? norm_h - norm_c[1] : norm_h - norm_c[1] - 0.5 * (norm_l - norm_h[1])
LRef = norm_h >= norm_l[1] ? norm_c[1] - norm_l : norm_c[1] - norm_l - 0.5 * (norm_l[1] - norm_h)

trueRange = follow_type == 'enhanced' ? 
             math.max(HiLo, HRef, LRef) : 
             math.max(norm_h - norm_l, math.abs(norm_h - norm_c[1]), math.abs(norm_l - norm_c[1]))

// Trend following logic
loss = trend_multiplier * Enhanced_ma(trueRange, trend_period)

Up = norm_c - loss
Dn = norm_c + loss

TrendUp = 0.0
TrendDown = 0.0
Trend = 0

TrendUp := norm_c[1] > TrendUp[1] ? math.max(Up, TrendUp[1]) : Up
TrendDown := norm_c[1] < TrendDown[1] ? math.min(Dn, TrendDown[1]) : Dn

Trend := norm_c > TrendDown[1] ? 1 : norm_c < TrendUp[1] ? -1 : nz(Trend[1], 1)
trail = Trend == 1 ? TrendUp : TrendDown

// Extreme points (swing high/low in trend)
ex = 0.0
ex := ta.crossover(Trend, 0) ? norm_h : 
      ta.crossunder(Trend, 0) ? norm_l : 
      Trend == 1 ? math.max(ex[1], norm_h) : 
      Trend == -1 ? math.min(ex[1], norm_l) : ex[1]

// State
state = Trend == 1 ? 'up' : 'down'
prev_state = state[1]

// ATR for risk management
atr = ta.atr(14)

// ═══════════════════════════════════════════════════════════════════════════════
// 📊 FIBONACCI ZONES CALCULATION
// ═══════════════════════════════════════════════════════════════════════════════

// Zone levels (retracement from extreme to trend line)
z0 = ex + (trail - ex) * zone0_level / 100
z1 = ex + (trail - ex) * zone1_level / 100
z2 = ex + (trail - ex) * zone2_level / 100
z3 = ex + (trail - ex) * zone3_level / 100
l100 = trail + 0

// ═══════════════════════════════════════════════════════════════════════════════
// ✅ CONFIRMATION FILTERS (Light - không quá gắt)
// ═══════════════════════════════════════════════════════════════════════════════

// Volume confirmation (optional)
volume_ma = ta.sma(volume, volume_ma_length)
volume_spike = volume > volume_ma * volume_threshold
volume_ok = enable_volume_confirm ? volume_spike : true

// Momentum confirmation (optional) - Chỉ check không quá extreme
rsi = ta.rsi(close, rsi_length)
rsi_ok_long = enable_momentum_confirm ? rsi < rsi_overbought : true  // Không quá overbought
rsi_ok_short = enable_momentum_confirm ? rsi > rsi_oversold : true   // Không quá oversold

// ═══════════════════════════════════════════════════════════════════════════════
// 🎯 ENTRY SIGNALS - Pullback to Zones
// ═══════════════════════════════════════════════════════════════════════════════

// Zone Cross Detection (price crosses INTO zone)
z0_long = state == 'up' and ta.crossunder(norm_c, z0) and volume_ok and rsi_ok_long
z1_long = state == 'up' and ta.crossunder(norm_c, z1) and volume_ok and rsi_ok_long
z2_long = state == 'up' and ta.crossunder(norm_c, z2) and volume_ok and rsi_ok_long
z3_long = state == 'up' and ta.crossunder(norm_c, z3) and volume_ok and rsi_ok_long

z0_short = state == 'down' and ta.crossover(norm_c, z0) and volume_ok and rsi_ok_short
z1_short = state == 'down' and ta.crossover(norm_c, z1) and volume_ok and rsi_ok_short
z2_short = state == 'down' and ta.crossover(norm_c, z2) and volume_ok and rsi_ok_short
z3_short = state == 'down' and ta.crossover(norm_c, z3) and volume_ok and rsi_ok_short

// Any zone signal
any_long_signal = z0_long or z1_long or z2_long or z3_long
any_short_signal = z0_short or z1_short or z2_short or z3_short

// Determine which zone was hit (for SL calculation)
var string last_entry_zone = na
var float entry_price = na
var float stop_loss = na
var float take_profit = na
var float trailing_stop = na
var bool in_long = false
var bool in_short = false
var int bars_in_trade = 0

// ═══════════════════════════════════════════════════════════════════════════════
// 💼 POSITION MANAGEMENT
// ═══════════════════════════════════════════════════════════════════════════════

// Entry Logic
if any_long_signal and not in_long
    entry_price := close
    last_entry_zone := z0_long ? "Zone 0" : z1_long ? "Zone 1" : z2_long ? "Zone 2" : "Zone 3"
    
    // Calculate SL based on zone
    sl_atr = z0_long ? stop_loss_atr_z0 : z1_long ? stop_loss_atr_z1 : z2_long ? stop_loss_atr_z2 : stop_loss_atr_z3
    stop_loss := entry_price - (atr * sl_atr)
    take_profit := entry_price + (atr * take_profit_atr)
    
    trailing_stop := na
    in_long := true
    in_short := false
    bars_in_trade := 0

if any_short_signal and not in_short
    entry_price := close
    last_entry_zone := z0_short ? "Zone 0" : z1_short ? "Zone 1" : z2_short ? "Zone 2" : "Zone 3"
    
    // Calculate SL based on zone
    sl_atr = z0_short ? stop_loss_atr_z0 : z1_short ? stop_loss_atr_z1 : z2_short ? stop_loss_atr_z2 : stop_loss_atr_z3
    stop_loss := entry_price + (atr * sl_atr)
    take_profit := entry_price - (atr * take_profit_atr)
    
    trailing_stop := na
    in_short := true
    in_long := false
    bars_in_trade := 0

// Exit Logic - Long
if in_long
    bars_in_trade += 1
    profit = close - entry_price
    
    // Trailing stop activation
    if use_trailing_stop and profit >= (atr * trailing_activation_atr)
        new_trailing = close - (atr * trailing_distance_atr)
        trailing_stop := na(trailing_stop) ? new_trailing : math.max(trailing_stop, new_trailing)
    
    // Exit conditions
    hit_stop = close <= (use_trailing_stop and not na(trailing_stop) ? trailing_stop : stop_loss)
    hit_target = close >= take_profit
    trend_changed = exit_on_trend_change and state != 'up'
    
    if hit_stop or hit_target or trend_changed
        in_long := false
        entry_price := na
        stop_loss := na
        take_profit := na
        trailing_stop := na
        last_entry_zone := na

// Exit Logic - Short
if in_short
    bars_in_trade += 1
    profit = entry_price - close
    
    // Trailing stop activation
    if use_trailing_stop and profit >= (atr * trailing_activation_atr)
        new_trailing = close + (atr * trailing_distance_atr)
        trailing_stop := na(trailing_stop) ? new_trailing : math.min(trailing_stop, new_trailing)
    
    // Exit conditions
    hit_stop = close >= (use_trailing_stop and not na(trailing_stop) ? trailing_stop : stop_loss)
    hit_target = close <= take_profit
    trend_changed = exit_on_trend_change and state != 'down'
    
    if hit_stop or hit_target or trend_changed
        in_short := false
        entry_price := na
        stop_loss := na
        take_profit := na
        trailing_stop := na
        last_entry_zone := na

// ═══════════════════════════════════════════════════════════════════════════════
// 🎨 PLOTTING
// ═══════════════════════════════════════════════════════════════════════════════

// Trend Line (Dynamic Support/Resistance)
plot(show_trend_line ? trail : na, 'Trend Line', 
     color=Trend == 1 ? color_uptrend : color_downtrend, 
     linewidth=3, style=plot.style_line)

// Key Points (Extremes)
plot(show_key_points ? ex : na, 'Extreme Points', 
     style=plot.style_circles, 
     color=Trend == 1 ? color.new(color_uptrend, 30) : color.new(color_downtrend, 30), 
     linewidth=4)

// Fibonacci Zones
Zone0 = plot(show_zones and show_zone0 ? z0 : na, 'Zone 0 (88.6%)', color=color.new(color_zone0, 80), linewidth=1)
Zone1 = plot(show_zones ? z1 : na, 'Zone 1 (78.6%)', color=color.new(color_zone1, 80), linewidth=1)
Zone2 = plot(show_zones ? z2 : na, 'Zone 2 (61.8%)', color=color.new(color_zone2, 80), linewidth=1)
Zone3 = plot(show_zones ? z3 : na, 'Zone 3 (50%)', color=color.new(color_zone3, 80), linewidth=1)
L100 = plot(show_zones ? l100 : na, 'Trend Line (100%)', color=color.new(#787b86, 80), linewidth=1)

// Zone fills (shaded areas)
if show_zones
    if show_zone0
        fill(Zone0, Zone1, color=state == 'up' ? color.new(color_zone0, 90) : color.new(color_zone0, 90), title='Zone 0 Fill')
    fill(Zone1, Zone2, color=state == 'up' ? color.new(color_zone1, 90) : color.new(color_zone1, 90), title='Zone 1 Fill')
    fill(Zone2, Zone3, color=state == 'up' ? color.new(color_zone2, 90) : color.new(color_zone2, 90), title='Zone 2 Fill')
    fill(Zone3, L100, color=state == 'up' ? color.new(color_zone3, 90) : color.new(color_zone3, 90), title='Zone 3 Fill')

// Entry Signals
if show_entry_signals
    // Long signals with zone labels
    if z0_long
        label.new(bar_index, low, 'Z0\nLONG', 
                 style=label.style_label_up, color=color_zone0, textcolor=color.white, size=size.normal)
    if z1_long
        label.new(bar_index, low, 'Z1\nLONG', 
                 style=label.style_label_up, color=color_zone1, textcolor=color.white, size=size.normal)
    if z2_long
        label.new(bar_index, low, 'Z2\nLONG', 
                 style=label.style_label_up, color=color_zone2, textcolor=color.white, size=size.normal)
    if z3_long
        label.new(bar_index, low, 'Z3\nLONG', 
                 style=label.style_label_up, color=color_zone3, textcolor=color.white, size=size.normal)
    
    // Short signals
    if z0_short
        label.new(bar_index, high, 'Z0\nSHORT', 
                 style=label.style_label_down, color=color_zone0, textcolor=color.white, size=size.normal)
    if z1_short
        label.new(bar_index, high, 'Z1\nSHORT', 
                 style=label.style_label_down, color=color_zone1, textcolor=color.white, size=size.normal)
    if z2_short
        label.new(bar_index, high, 'Z2\nSHORT', 
                 style=label.style_label_down, color=color_zone2, textcolor=color.white, size=size.normal)
    if z3_short
        label.new(bar_index, high, 'Z3\nSHORT', 
                 style=label.style_label_down, color=color_zone3, textcolor=color.white, size=size.normal)

// ═══════════════════════════════════════════════════════════════════════════════
// 💰 RISK LEVELS VISUALIZATION
// ═══════════════════════════════════════════════════════════════════════════════

var line sl_line = na
var line tp_line = na
var line ts_line = na
var label sl_label = na
var label tp_label = na
var label entry_label = na

if show_risk_levels
    // Delete old lines
    if not na(sl_line)
        line.delete(sl_line)
    if not na(tp_line)
        line.delete(tp_line)
    if not na(ts_line)
        line.delete(ts_line)
    if not na(sl_label)
        label.delete(sl_label)
    if not na(tp_label)
        label.delete(tp_label)
    if not na(entry_label)
        label.delete(entry_label)
    
    // Draw new lines for active positions
    if in_long or in_short
        current_sl = use_trailing_stop and not na(trailing_stop) ? trailing_stop : stop_loss
        line_color = in_long ? color_uptrend : color_downtrend
        
        sl_line := line.new(bar_index - bars_in_trade, current_sl, bar_index + 10, current_sl, 
                           color=color_downtrend, width=2, style=line.style_dashed)
        
        tp_line := line.new(bar_index - bars_in_trade, take_profit, bar_index + 10, take_profit, 
                           color=color_uptrend, width=2, style=line.style_dashed)
        
        // Show trailing stop separately if active
        if use_trailing_stop and not na(trailing_stop)
            ts_line := line.new(bar_index - bars_in_trade, trailing_stop, bar_index + 10, trailing_stop, 
                               color=color.orange, width=2, style=line.style_dotted)

// Labels for active position
if show_risk_levels and (any_long_signal or any_short_signal)
    risk = in_long ? (entry_price - stop_loss) : (stop_loss - entry_price)
    reward = in_long ? (take_profit - entry_price) : (entry_price - take_profit)
    rr_ratio = reward / risk
    
    label_y = in_long ? low : high
    label_style = in_long ? label.style_label_up : label.style_label_down
    
    entry_label := label.new(bar_index, entry_price, 
                            text='Entry: ' + str.tostring(entry_price, format.mintick) + '\n' + last_entry_zone, 
                            color=color.new(in_long ? color_uptrend : color_downtrend, 70), 
                            textcolor=color.white, style=label.style_label_left, size=size.small)
    
    sl_label := label.new(bar_index, stop_loss, 
                         text='SL: ' + str.tostring(stop_loss, format.mintick), 
                         color=color.new(color_downtrend, 70), textcolor=color.white, 
                         style=label.style_label_left, size=size.small)
    
    tp_label := label.new(bar_index, take_profit, 
                         text='TP: ' + str.tostring(take_profit, format.mintick) + '\nR/R: 1:' + str.tostring(rr_ratio, '#.#'), 
                         color=color.new(color_uptrend, 70), textcolor=color.white, 
                         style=label.style_label_left, size=size.small)

// ═══════════════════════════════════════════════════════════════════════════════
// 📊 DASHBOARD
// ═══════════════════════════════════════════════════════════════════════════════

var table dashboard = table.new(position.top_right, 2, 12, border_width=2, 
                                border_color=color.gray, frame_color=color.gray, frame_width=2)

if show_dashboard and barstate.islast
    // Header
    table.cell(dashboard, 0, 0, 'Zone Cross System Enhanced', 
              bgcolor=#1a1a2e, text_color=color.white, text_size=size.normal)
    table.merge_cells(dashboard, 0, 0, 1, 0)
    
    // Trend Status
    trend_text = state == 'up' ? '🟢 UPTREND' : '🔴 DOWNTREND'
    trend_color = state == 'up' ? color.new(color_uptrend, 70) : color.new(color_downtrend, 70)
    
    table.cell(dashboard, 0, 1, 'Trend Status:', bgcolor=#2e2e42, text_color=color.white, text_size=size.small)
    table.cell(dashboard, 1, 1, trend_text, bgcolor=trend_color, text_color=color.white, text_size=size.small)
    
    // Zone Distances (how far price is from each zone)
    dist_z0 = state == 'up' ? ((close - z0) / close * 100) : ((z0 - close) / close * 100)
    dist_z1 = state == 'up' ? ((close - z1) / close * 100) : ((z1 - close) / close * 100)
    dist_z2 = state == 'up' ? ((close - z2) / close * 100) : ((z2 - close) / close * 100)
    dist_z3 = state == 'up' ? ((close - z3) / close * 100) : ((z3 - close) / close * 100)
    
    // Closest zone
    closest = math.abs(dist_z0) < math.abs(dist_z1) and math.abs(dist_z0) < math.abs(dist_z2) and math.abs(dist_z0) < math.abs(dist_z3) ? "Zone 0" :
              math.abs(dist_z1) < math.abs(dist_z2) and math.abs(dist_z1) < math.abs(dist_z3) ? "Zone 1" :
              math.abs(dist_z2) < math.abs(dist_z3) ? "Zone 2" : "Zone 3"
    
    table.cell(dashboard, 0, 2, 'Closest Zone:', bgcolor=#2e2e42, text_color=color.white, text_size=size.small)
    table.cell(dashboard, 1, 2, closest, bgcolor=color.new(color.blue, 70), text_color=color.white, text_size=size.small)
    
    // Zone 0 Distance
    table.cell(dashboard, 0, 3, 'Zone 0 (88.6%):', bgcolor=#2e2e42, text_color=color.white, text_size=size.small)
    table.cell(dashboard, 1, 3, str.tostring(dist_z0, '#.##') + '%', 
              bgcolor=color.new(color_zone0, 70), text_color=color.white, text_size=size.small)
    
    // Zone 1 Distance
    table.cell(dashboard, 0, 4, 'Zone 1 (78.6%):', bgcolor=#2e2e42, text_color=color.white, text_size=size.small)
    table.cell(dashboard, 1, 4, str.tostring(dist_z1, '#.##') + '%', 
              bgcolor=color.new(color_zone1, 70), text_color=color.white, text_size=size.small)
    
    // Zone 2 Distance
    table.cell(dashboard, 0, 5, 'Zone 2 (61.8%):', bgcolor=#2e2e42, text_color=color.white, text_size=size.small)
    table.cell(dashboard, 1, 5, str.tostring(dist_z2, '#.##') + '%', 
              bgcolor=color.new(color_zone2, 70), text_color=color.white, text_size=size.small)
    
    // Zone 3 Distance
    table.cell(dashboard, 0, 6, 'Zone 3 (50%):', bgcolor=#2e2e42, text_color=color.white, text_size=size.small)
    table.cell(dashboard, 1, 6, str.tostring(dist_z3, '#.##') + '%', 
              bgcolor=color.new(color_zone3, 70), text_color=color.white, text_size=size.small)
    
    // Position Status
    if in_long or in_short
        position_text = in_long ? '📈 In Long (' + last_entry_zone + ')' : '📉 In Short (' + last_entry_zone + ')'
        position_color = in_long ? color.new(color_uptrend, 50) : color.new(color_downtrend, 50)
        
        table.cell(dashboard, 0, 7, 'Position:', bgcolor=#2e2e42, text_color=color.white, text_size=size.small)
        table.cell(dashboard, 1, 7, position_text, bgcolor=position_color, text_color=color.white, text_size=size.small)
        
        // P&L
        current_pnl = in_long ? (close - entry_price) : (entry_price - close)
        pnl_percent = (current_pnl / entry_price) * 100
        pnl_color = current_pnl > 0 ? color.new(color_uptrend, 50) : color.new(color_downtrend, 50)
        
        table.cell(dashboard, 0, 8, 'P&L:', bgcolor=#2e2e42, text_color=color.white, text_size=size.small)
        table.cell(dashboard, 1, 8, str.tostring(pnl_percent, '#.##') + '%', 
                  bgcolor=pnl_color, text_color=color.white, text_size=size.small)
        
        // Trailing Status
        if use_trailing_stop
            trailing_status = not na(trailing_stop) ? '✅ ACTIVE' : '⏳ Waiting'
            trailing_color = not na(trailing_stop) ? color.new(color.green, 70) : color.new(color.gray, 70)
            
            table.cell(dashboard, 0, 9, 'Trailing:', bgcolor=#2e2e42, text_color=color.white, text_size=size.small)
            table.cell(dashboard, 1, 9, trailing_status, bgcolor=trailing_color, text_color=color.white, text_size=size.small)
    else
        table.cell(dashboard, 0, 7, 'Status:', bgcolor=#2e2e42, text_color=color.white, text_size=size.small)
        table.cell(dashboard, 1, 7, '⏸️ Waiting for Pullback', 
                  bgcolor=color.new(color.gray, 70), text_color=color.white, text_size=size.small)
    
    // ATR
    table.cell(dashboard, 0, 10, 'ATR:', bgcolor=#2e2e42, text_color=color.white, text_size=size.small)
    table.cell(dashboard, 1, 10, str.tostring(atr, format.mintick), 
              bgcolor=color.new(color.blue, 70), text_color=color.white, text_size=size.small)
    
    // Filters Status
    filters_text = ''
    if enable_volume_confirm
        filters_text += volume_ok ? '✅Vol ' : '❌Vol '
    if enable_momentum_confirm
        filters_text += (in_long or state == 'up') ? (rsi_ok_long ? '✅RSI' : '❌RSI') : (rsi_ok_short ? '✅RSI' : '❌RSI')
    if not enable_volume_confirm and not enable_momentum_confirm
        filters_text := 'No Filters'
    
    table.cell(dashboard, 0, 11, 'Filters:', bgcolor=#2e2e42, text_color=color.white, text_size=size.small)
    table.cell(dashboard, 1, 11, filters_text, 
              bgcolor=color.new(color.purple, 70), text_color=color.white, text_size=size.small)

// ═══════════════════════════════════════════════════════════════════════════════
// 🔔 ALERTS
// ═══════════════════════════════════════════════════════════════════════════════

// Zone Entry Alerts
alertcondition(z0_long, title='🔵 Zone 0 Long Entry', 
              message='🔵 ZONE 0 LONG (Safest Entry)\n' + 
                      'Price: {{close}}\n' + 
                      'Stop Loss: ' + str.tostring(stop_loss, format.mintick) + '\n' + 
                      'Take Profit: ' + str.tostring(take_profit, format.mintick))

alertcondition(z1_long, title='🔷 Zone 1 Long Entry', 
              message='🔷 ZONE 1 LONG\nPrice: {{close}}\nSL: ' + str.tostring(stop_loss, format.mintick))

alertcondition(z2_long, title='🔹 Zone 2 Long Entry', 
              message='🔹 ZONE 2 LONG\nPrice: {{close}}\nSL: ' + str.tostring(stop_loss, format.mintick))

alertcondition(z3_long, title='◽ Zone 3 Long Entry', 
              message='◽ ZONE 3 LONG (Aggressive)\nPrice: {{close}}\nSL: ' + str.tostring(stop_loss, format.mintick))

alertcondition(z0_short, title='🔴 Zone 0 Short Entry', 
              message='🔴 ZONE 0 SHORT (Safest Entry)\nPrice: {{close}}\nSL: ' + str.tostring(stop_loss, format.mintick))

alertcondition(z1_short, title='🔻 Zone 1 Short Entry', 
              message='🔻 ZONE 1 SHORT\nPrice: {{close}}\nSL: ' + str.tostring(stop_loss, format.mintick))

alertcondition(z2_short, title='🔸 Zone 2 Short Entry', 
              message='🔸 ZONE 2 SHORT\nPrice: {{close}}\nSL: ' + str.tostring(stop_loss, format.mintick))

alertcondition(z3_short, title='◾ Zone 3 Short Entry', 
              message='◾ ZONE 3 SHORT (Aggressive)\nPrice: {{close}}\nSL: ' + str.tostring(stop_loss, format.mintick))

// Exit Alerts
alertcondition(in_long and close <= stop_loss, title='🛑 Long Stop Loss', 
              message='🛑 Long Stop Loss Hit\nExit: {{close}}')

alertcondition(in_short and close >= stop_loss, title='🛑 Short Stop Loss', 
              message='🛑 Short Stop Loss Hit\nExit: {{close}}')

alertcondition(in_long and close >= take_profit, title='🎯 Long Take Profit', 
              message='🎯 Long Take Profit Hit!\nExit: {{close}}')

alertcondition(in_short and close <= take_profit, title='🎯 Short Take Profit', 
              message='🎯 Short Take Profit Hit!\nExit: {{close}}')

// Trend Change Alert
alertcondition(state != prev_state, title='🔄 Trend Change', 
              message='🔄 Trend Changed to ' + (state == 'up' ? 'UPTREND 🟢' : 'DOWNTREND 🔴'))

// Trailing Activation
alertcondition(use_trailing_stop and in_long and not na(trailing_stop) and na(trailing_stop[1]), 
              title='🔄 Long Trailing Active', 
              message='🔄 Long Trailing Stop Activated\nTrailing at: ' + str.tostring(trailing_stop, format.mintick))

alertcondition(use_trailing_stop and in_short and not na(trailing_stop) and na(trailing_stop[1]), 
              title='🔄 Short Trailing Active', 
              message='🔄 Short Trailing Stop Activated\nTrailing at: ' + str.tostring(trailing_stop, format.mintick))

// ═══════════════════════════════════════════════════════════════════════════════
// 📝 DOCUMENTATION
// ═══════════════════════════════════════════════════════════════════════════════

// HƯỚNG DẪN SỬ DỤNG:
//
// 1. CONCEPT:
//    - Chờ trend rõ ràng (Uptrend hoặc Downtrend)
//    - Đợi pullback về các vùng Fibonacci (zones)
//    - Entry khi giá chạm zone = Buy the dip / Sell the rally
//
// 2. ZONES (từ an toàn → rủi ro):
//    Zone 0 (88.6%): An toàn nhất, SL gần, win rate cao nhất
//    Zone 1 (78.6%): Balanced
//    Zone 2 (61.8%): Golden ratio, phổ biến
//    Zone 3 (50.0%): Aggressive, SL xa, R/R tốt nhưng rủi ro hơn
//
// 3. ENTRY:
//    - Long: Khi price crosses DOWN vào zone trong UPTREND
//    - Short: Khi price crosses UP vào zone trong DOWNTREND
//
// 4. EXIT:
//    - Stop Loss: Dựa trên zone (Zone 0 = SL gần, Zone 3 = SL xa)
//    - Take Profit: Back to extreme (target: 6 ATR default)
//    - Trailing Stop: Auto activate sau khi lời 3 ATR
//    - Trend Change: Exit nếu trend đảo chiều
//
// 5. FILTERS (Optional - Light):
//    - Volume: Đảm bảo có thanh khoản đủ
//    - RSI: Tránh entry khi quá extreme
//
// CẢI TIẾN SO VỚI BẢN GỐC:
// ✅ Thêm Zone 0 (safest entry point)
// ✅ SL/TP rõ ràng cho từng zone
// ✅ Trailing stop bảo vệ lợi nhuận
// ✅ Exit on trend change (không bị đảo chiều)
// ✅ Dashboard hiển thị zone distances
// ✅ Filters nhẹ (optional, không bắt buộc)
// ✅ Visual improvements (colors, labels)
// ✅ Complete alert system (16 alerts)
//
// BALANCED APPROACH:
// - Không quá strict filters (khác Signal System V6 Pro)
// - Vẫn có đủ signals (không bỏ lỡ cơ hội)
// - Focus vào QUALITY entries (pullback trong trend)
// - Risk management rõ ràng nhưng flexible
